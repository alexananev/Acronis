
WNDCLASSA struc ; (sizeof=0x28, align=0x4, copyof_1)
                        ; XREF: DATA:WndClass/r
style dd ?
lpfnWndProc dd ?        ; offset
cbClsExtra dd ?
cbWndExtra dd ?
hInstance dd ?          ; offset
hIcon dd ?              ; offset
hCursor dd ?            ; offset
hbrBackground dd ?      ; offset
lpszMenuName dd ?       ; offset
lpszClassName dd ?      ; offset
WNDCLASSA ends


tagMSG struc ; (sizeof=0x1C, align=0x4, copyof_21)
hwnd dd ?               ; offset
message dd ?
wParam dd ?
lParam dd ?
time dd ?
pt POINT ?
tagMSG ends


POINT struc ; (sizeof=0x8, align=0x4, copyof_23)
                        ; XREF: tagMSG/r MSG/r
x dd ?
y dd ?
POINT ends


MSG struc ; (sizeof=0x1C, align=0x4, copyof_26)
                        ; XREF: DATA:Msg/r
hwnd dd ?               ; offset
message dd ?
wParam dd ?             ; XREF: start:loc_40111D/r
lParam dd ?
time dd ?
pt POINT ?
MSG ends


;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 0C7CDFDB6D4C8876E9C5BAE906FCF1CBF174F019EF45D518954885856501A0BE
; Input MD5    : 66F573036F8B99863D75743EFF84F15D
; Input CRC32  : 503D64C9

; File Name   : C:\Users\aanan\Desktop\New folder (2)\New folder\crackme.exe
; Format      : Portable executable for 80386 (PE)
; Imagebase   : 400000
; Timestamp   : 0AD92429 (Wed Oct 08 12:18:49 1975)
; Section 1. (virtual address 00001000)
; Virtual size                  : 00001000 (   4096.)
; Section size in file          : 00000600 (   1536.)
; Offset to raw data for section: 00000600
; Flags 60000020: Text Executable Readable
; Alignment     : default

.686p
.mmx
.model flat


; Segment type: Pure code
; Segment permissions: Read/Execute
CODE segment para public 'CODE' use32
assume cs:CODE
;org 401000h
assume es:nothing, ss:nothing, ds:CODE, fs:nothing, gs:nothing



public start
start proc near
push    0               ; lpModuleName
call    GetModuleHandleA
mov     ds:hInstance, eax
push    0               ; lpWindowName
push    offset ClassName ; "No need to disasm the code!"
call    FindWindowA
or      eax, eax
jz      short loc_40101D
retn

loc_40101D:
mov     ds:WndClass.style, 4003h
mov     ds:WndClass.lpfnWndProc, offset WndProc
mov     ds:WndClass.cbClsExtra, 0
mov     ds:WndClass.cbWndExtra, 0
mov     eax, ds:hInstance
mov     ds:WndClass.hInstance, eax
push    64h             ; lpIconName
push    eax             ; hInstance
call    LoadIconA
mov     ds:WndClass.hIcon, eax
push    7F00h           ; lpCursorName
push    0               ; hInstance
call    LoadCursorA
mov     ds:WndClass.hCursor, eax
mov     ds:WndClass.hbrBackground, 5
mov     ds:WndClass.lpszMenuName, offset aMenu ; "MENU"
mov     ds:WndClass.lpszClassName, offset ClassName ; "No need to disasm the code!"
push    offset WndClass ; lpWndClass
call    RegisterClassA
push    0               ; lpParam
push    ds:hInstance    ; hInstance
push    0               ; hMenu
push    0               ; hWndParent
push    8000h           ; nHeight
push    8000h           ; nWidth
push    6Eh             ; Y
push    0B4h            ; X
push    0CF0000h        ; dwStyle
push    offset WindowName ; "CrackMe v1.0"
push    offset ClassName ; "No need to disasm the code!"
push    0               ; dwExStyle
call    CreateWindowExA
mov     ds:hWnd, eax
push    1               ; nCmdShow
push    ds:hWnd         ; hWnd
call    ShowWindow
push    ds:hWnd         ; hWnd
call    UpdateWindow
push    1               ; bErase
push    0               ; lpRect
push    dword ptr [ebp+8] ; hWnd
call    InvalidateRect

loc_4010F1:             ; wMsgFilterMax
push    0
push    0               ; wMsgFilterMin
push    0               ; hWnd
push    offset Msg      ; lpMsg
call    GetMessageA
cmp     ax, 0
jz      short loc_40111D
push    offset Msg      ; lpMsg
call    TranslateMessage
push    offset Msg      ; lpMsg
call    DispatchMessageA
jmp     short loc_4010F1

loc_40111D:             ; uExitCode
push    ds:Msg.wParam
call    ExitProcess
start endp

; Exported entry   1. WndProc


; Attributes: bp-based frame

; int __stdcall WndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
public WndProc
WndProc proc near

hWnd= dword ptr  8
Msg= dword ptr  0Ch
wParam= dword ptr  10h
lParam= dword ptr  14h

enter   0, 0
push    esi
push    edi
push    ebx
cmp     [ebp+Msg], 2
jz      short loc_401193
cmp     [ebp+Msg], 204h
jz      short loc_4011A3
nop
nop
nop
nop
cmp     [ebp+Msg], 5
jz      short loc_4011A5
cmp     [ebp+Msg], 1
jz      short loc_401176
cmp     [ebp+Msg], 201h
jz      short loc_4011A1
cmp     [ebp+Msg], 24h
jz      short loc_4011AC
cmp     [ebp+Msg], 111h
jz      short loc_4011D2
nop
nop
nop
nop
jmp     short loc_401180
mov     eax, 0
jmp     short loc_4011E6
db 3 dup(90h)

loc_401176:
mov     eax, 0
jmp     short loc_4011E6
align 10h

loc_401180:             ; lParam
push    [ebp+lParam]
push    [ebp+wParam]    ; wParam
push    [ebp+Msg]       ; Msg
push    [ebp+hWnd]      ; hWnd
call    DefWindowProcA
jmp     short loc_4011E6

loc_401193:             ; nExitCode
push    0
call    PostQuitMessage
mov     eax, 0
jmp     short loc_4011E6

loc_4011A1:
jmp     short loc_4011E6

loc_4011A3:
jmp     short loc_4011E6

loc_4011A5:
mov     eax, 0
jmp     short loc_4011E6

loc_4011AC:
mov     ebx, [ebp+lParam]
mov     dword ptr [ebx+18h], 118h
mov     dword ptr [ebx+1Ch], 0A0h
mov     dword ptr [ebx+20h], 118h
mov     dword ptr [ebx+24h], 0A0h
mov     eax, 0
jmp     short loc_4011E6

loc_4011D2:
cmp     [ebp+wParam], 67h
jz      short loc_4011ED
cmp     [ebp+wParam], 65h
jz      short loc_401193
cmp     [ebp+wParam], 66h
jz      short loc_401209
jmp     short $+2

loc_4011E6:
pop     ebx
pop     edi
pop     esi
leave
retn    10h

loc_4011ED:             ; dwInitParam
push    0
push    offset DialogFunc ; lpDialogFunc
push    [ebp+hWnd]      ; hWndParent
push    offset TemplateName ; "DLG_ABOUT"
push    ds:hInstance    ; hInstance
call    DialogBoxParamA
jmp     short loc_4011E6

loc_401209:             ; dwInitParam
push    0
push    offset sub_401253 ; lpDialogFunc
push    [ebp+hWnd]      ; hWndParent
push    offset aDlgRegis ; "DLG_REGIS"
push    ds:hInstance    ; hInstance
call    DialogBoxParamA
cmp     eax, 0
jz      short loc_4011E6
push    offset String
call    sub_40137E
push    eax
push    offset byte_40217E
call    sub_4013D8
add     esp, 4
pop     eax
cmp     eax, ebx
jz      short loc_40124C
call    failed
jmp     short loc_4011E6

loc_40124C:
call    success
jmp     short loc_4011E6
WndProc endp



; Attributes: bp-based frame

; INT_PTR __stdcall sub_401253(HWND, UINT, WPARAM, LPARAM)
sub_401253 proc near

hWnd= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

enter   0, 0
push    ebx
push    esi
push    edi
cmp     [ebp+arg_4], 110h
jz      short loc_401297
cmp     [ebp+arg_4], 111h
jz      short loc_4012A1
cmp     [ebp+arg_4], 10h
jz      loc_4012F7
cmp     [ebp+arg_4], 201h
jz      short loc_40128B
mov     eax, 0

loc_401284:
pop     edi
pop     esi
pop     ebx
leave
retn    10h

loc_40128B:             ; bErase
push    1
push    0               ; lpRect
push    [ebp+hWnd]      ; hWnd
call    InvalidateRect

loc_401297:             ; hWnd
push    [ebp+hWnd]
call    SetFocus
jmp     short loc_401284

loc_4012A1:
xor     eax, eax
cmp     [ebp+arg_8], 3EBh
jz      short loc_4012F7
cmp     [ebp+arg_8], 3EAh
jnz     short loc_4012F0
push    0Bh             ; cchMax
push    offset String   ; lpString
push    3E8h            ; nIDDlgItem
push    [ebp+hWnd]      ; hDlg
call    GetDlgItemTextA
cmp     eax, 1
mov     [ebp+arg_8], 3EBh
jb      short loc_4012A1
push    0Bh             ; cchMax
push    offset byte_40217E ; lpString
push    3E9h            ; nIDDlgItem
push    [ebp+hWnd]      ; hDlg
call    GetDlgItemTextA
mov     eax, 1
jmp     short loc_4012F7

loc_4012F0:
mov     eax, 0
jmp     short loc_401284

loc_4012F7:             ; nResult
push    eax
push    [ebp+hWnd]      ; hDlg
call    EndDialog
mov     eax, 1
jmp     loc_401284
sub_401253 endp



; Attributes: bp-based frame

; INT_PTR __stdcall DialogFunc(HWND, UINT, WPARAM, LPARAM)
DialogFunc proc near

hDlg= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

enter   0, 0
push    ebx
push    esi
push    edi
cmp     [ebp+arg_4], 111h
jz      short loc_40132C
cmp     [ebp+arg_4], 10h
jz      short loc_401335
mov     eax, 0

loc_401325:
pop     edi
pop     esi
pop     ebx
leave
retn    10h

loc_40132C:
cmp     [ebp+arg_8], 3F2h
jnz     short loc_401346

loc_401335:             ; nResult
push    0
push    [ebp+hDlg]      ; hDlg
call    EndDialog
mov     eax, 1
jmp     short loc_401325

loc_401346:
mov     eax, 0
jmp     short loc_401325
DialogFunc endp




success proc near
push    30h             ; uType
push    offset Caption  ; "Good work!"
push    offset Text     ; "Great work, mate!\rNow try the next Cra"...
push    dword ptr [ebp+8] ; hWnd
call    MessageBoxA
retn
success endp




failed proc near
push    0               ; uType
call    MessageBeep
push    30h             ; uType
push    offset aNoLuck  ; "No luck!"
push    offset aNoLuckThereMat ; "No luck there, mate!"
push    dword ptr [ebp+8] ; hWnd
call    MessageBoxA
retn
failed endp




sub_40137E proc near

arg_0= dword ptr  4

mov     esi, [esp+arg_0]
push    esi

loc_401383:
mov     al, [esi]
test    al, al
jz      short loc_40139C
cmp     al, 41h
jb      short loc_4013AC
cmp     al, 5Ah
jnb     short loc_401394
inc     esi
jmp     short loc_401383

loc_401394:
call    sub_4013D2
inc     esi
jmp     short loc_401383

loc_40139C:
pop     esi
call    sub_4013C2
xor     edi, 5678h
mov     eax, edi
jmp     short locret_4013C1

loc_4013AC:
pop     esi
push    30h             ; uType
push    offset aNoLuck  ; "No luck!"
push    offset aNoLuckThereMat ; "No luck there, mate!"
push    dword ptr [ebp+8] ; hWnd
call    MessageBoxA

locret_4013C1:
retn
sub_40137E endp




sub_4013C2 proc near
xor     edi, edi
xor     ebx, ebx

loc_4013C6:
mov     bl, [esi]
test    bl, bl
jz      short locret_4013D1
add     edi, ebx
inc     esi
jmp     short loc_4013C6

locret_4013D1:
retn
sub_4013C2 endp




sub_4013D2 proc near
sub     al, 20h
mov     [esi], al
retn
sub_4013D2 endp

retn



sub_4013D8 proc near

arg_0= dword ptr  4

xor     eax, eax
xor     edi, edi
xor     ebx, ebx
mov     esi, [esp+arg_0]

loc_4013E2:
mov     al, 0Ah
mov     bl, [esi]
test    bl, bl
jz      short loc_4013F5
sub     bl, 30h
imul    edi, eax
add     edi, ebx
inc     esi
jmp     short loc_4013E2

loc_4013F5:
xor     edi, 1234h
mov     ebx, edi
retn
sub_4013D8 endp

jmp     ds:KillTimer
jmp     ds:GetSystemMetrics
; [00000006 BYTES: COLLAPSED FUNCTION LoadCursorA. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:LoadAcceleratorsA
; [00000006 BYTES: COLLAPSED FUNCTION MessageBeep. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:GetWindowRect
jmp     ds:LoadStringA
; [00000006 BYTES: COLLAPSED FUNCTION LoadIconA. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:LoadBitmapA
; [00000006 BYTES: COLLAPSED FUNCTION SetFocus. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION MessageBoxA. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION PostQuitMessage. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:WinHelpA


; Attributes: thunk

; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
InvalidateRect proc near

hWnd= dword ptr  4
lpRect= dword ptr  8
bErase= dword ptr  0Ch

jmp     ds:__imp_InvalidateRect
InvalidateRect endp

jmp     ds:TranslateAcceleratorA
jmp     ds:MoveWindow
; [00000006 BYTES: COLLAPSED FUNCTION TranslateMessage. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:LoadMenuA
; [00000006 BYTES: COLLAPSED FUNCTION ShowWindow. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:SendMessageA
jmp     ds:SetTimer
jmp     ds:SetWindowPos
; [00000006 BYTES: COLLAPSED FUNCTION UpdateWindow. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION RegisterClassA. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:BeginPaint
; [00000006 BYTES: COLLAPSED FUNCTION CreateWindowExA. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION DefWindowProcA. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION DialogBoxParamA. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION DispatchMessageA. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:DrawMenuBar
; [00000006 BYTES: COLLAPSED FUNCTION EndDialog. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:EndPaint
; [00000006 BYTES: COLLAPSED FUNCTION FindWindowA. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:GetDC
jmp     ds:GetDlgItem
; [00000006 BYTES: COLLAPSED FUNCTION GetDlgItemTextA. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetMessageA. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:GetLocalTime
jmp     ds:OpenFile
jmp     ds:GlobalFree
jmp     ds:GlobalAlloc
jmp     ds:lstrlen
jmp     ds:CloseHandle
jmp     ds:WriteFile
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:ReadFile
; [00000006 BYTES: COLLAPSED FUNCTION ExitProcess. PRESS CTRL-NUMPAD+ TO EXPAND]
jmp     ds:InitCommonControls
jmp     ds:CreateToolbarEx
jmp     ds:CreateToolbar
jmp     ds:TextOutA
jmp     ds:StartPage
jmp     ds:StartDocA
jmp     ds:GetTextMetricsA
jmp     ds:GetStockObject
jmp     ds:EndPage
jmp     ds:EndDoc
jmp     ds:DeleteObject
jmp     ds:DeleteDC
jmp     ds:GetSaveFileNameA
jmp     ds:GetOpenFileNameA
jmp     ds:PrintDlgA
align 100h
dd 280h dup(?)
CODE ends

; Section 2. (virtual address 00002000)
; Virtual size                  : 00001000 (   4096.)
; Section size in file          : 00000200 (    512.)
; Offset to raw data for section: 00000C00
; Flags C0000040: Data Readable Writable
; Alignment     : default

; Segment type: Pure data
; Segment permissions: Read/Write
DATA segment para public 'DATA' use32
assume cs:DATA
;org 402000h
db    0
db    0
db    0
db    0
; HWND hWnd
hWnd dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; MSG Msg
Msg MSG <0>
; WNDCLASSA WndClass
WndClass WNDCLASSA <0>
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; HINSTANCE hInstance
hInstance dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  54h ; T
db  72h ; r
db  79h ; y
db  20h
db  74h ; t
db  6Fh ; o
db  20h
db  63h ; c
db  72h ; r
db  61h ; a
db  63h ; c
db  6Bh ; k
db  20h
db  6Dh ; m
db  65h ; e
db  21h ; !
db    0
; CHAR WindowName[]
WindowName db 'CrackMe v1.0',0
; CHAR ClassName[]
ClassName db 'No need to disasm the code!',0
aMenu db 'MENU',0
; CHAR aDlgRegis[]
aDlgRegis db 'DLG_REGIS',0
; CHAR TemplateName[]
TemplateName db 'DLG_ABOUT',0
; CHAR Caption[]
Caption db 'Good work!',0
; CHAR Text[]
Text db 'Great work, mate!',0Dh,'Now try the'
db ' next CrackMe!',0
; CHAR aNoLuck[]
aNoLuck db 'No luck!',0
; CHAR aNoLuckThereMat[]
aNoLuckThereMat db 'No luck there, mate!',0
; CHAR byte_40217E[16]
byte_40217E db 10h dup(0)
; CHAR String[3698]
String db 72h dup(0), 0E00h dup(?)
DATA ends

; Section 3. (virtual address 00003000)
; Virtual size                  : 00001000 (   4096.)
; Section size in file          : 00000800 (   2048.)
; Offset to raw data for section: 00000E00
; Flags C0000040: Data Readable Writable
; Alignment     : default

; Segment type: Externs
; _idata


;
; Imports from USER32.dll
;
; BOOL __stdcall KillTimer(HWND hWnd, UINT_PTR uIDEvent)
extrn KillTimer:dword
; int __stdcall GetSystemMetrics(int nIndex)
extrn GetSystemMetrics:dword
; HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName)
extrn __imp_LoadCursorA:dword
; HACCEL __stdcall LoadAcceleratorsA(HINSTANCE hInstance, LPCSTR lpTableName)
extrn LoadAcceleratorsA:dword
; BOOL __stdcall MessageBeep(UINT uType)
extrn __imp_MessageBeep:dword
; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
extrn GetWindowRect:dword
; int __stdcall LoadStringA(HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax)
extrn LoadStringA:dword
; HICON __stdcall LoadIconA(HINSTANCE hInstance, LPCSTR lpIconName)
extrn __imp_LoadIconA:dword
; HBITMAP __stdcall LoadBitmapA(HINSTANCE hInstance, LPCSTR lpBitmapName)
extrn LoadBitmapA:dword
; HWND __stdcall SetFocus(HWND hWnd)
extrn __imp_SetFocus:dword
; int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)
extrn __imp_MessageBoxA:dword
; void __stdcall PostQuitMessage(int nExitCode)
extrn __imp_PostQuitMessage:dword
; BOOL __stdcall WinHelpA(HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData)
extrn WinHelpA:dword
; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
extrn __imp_InvalidateRect:dword
; int __stdcall TranslateAcceleratorA(HWND hWnd, HACCEL hAccTable, LPMSG lpMsg)
extrn TranslateAcceleratorA:dword
; BOOL __stdcall MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint)
extrn MoveWindow:dword
; BOOL __stdcall TranslateMessage(const MSG *lpMsg)
extrn __imp_TranslateMessage:dword
; HMENU __stdcall LoadMenuA(HINSTANCE hInstance, LPCSTR lpMenuName)
extrn LoadMenuA:dword
; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
extrn __imp_ShowWindow:dword
; LRESULT __stdcall SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
extrn SendMessageA:dword
; UINT_PTR __stdcall SetTimer(HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc)
extrn SetTimer:dword
; BOOL __stdcall SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags)
extrn SetWindowPos:dword
; BOOL __stdcall UpdateWindow(HWND hWnd)
extrn __imp_UpdateWindow:dword
; ATOM __stdcall RegisterClassA(const WNDCLASSA *lpWndClass)
extrn __imp_RegisterClassA:dword
; HDC __stdcall BeginPaint(HWND hWnd, LPPAINTSTRUCT lpPaint)
extrn BeginPaint:dword
; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)
extrn __imp_CreateWindowExA:dword
; LRESULT __stdcall DefWindowProcA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
extrn __imp_DefWindowProcA:dword
; INT_PTR __stdcall DialogBoxParamA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
extrn __imp_DialogBoxParamA:dword
; LRESULT __stdcall DispatchMessageA(const MSG *lpMsg)
extrn __imp_DispatchMessageA:dword
; BOOL __stdcall DrawMenuBar(HWND hWnd)
extrn DrawMenuBar:dword
; BOOL __stdcall EndDialog(HWND hDlg, INT_PTR nResult)
extrn __imp_EndDialog:dword
; BOOL __stdcall EndPaint(HWND hWnd, const PAINTSTRUCT *lpPaint)
extrn EndPaint:dword
; HWND __stdcall FindWindowA(LPCSTR lpClassName, LPCSTR lpWindowName)
extrn __imp_FindWindowA:dword
; HDC __stdcall GetDC(HWND hWnd)
extrn GetDC:dword
; HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem)
extrn GetDlgItem:dword
; UINT __stdcall GetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax)
extrn __imp_GetDlgItemTextA:dword
; BOOL __stdcall GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax)
extrn __imp_GetMessageA:dword

;
; Imports from KERNEL32.dll
;
; void __stdcall GetLocalTime(LPSYSTEMTIME lpSystemTime)
extrn GetLocalTime:dword
; HFILE __stdcall OpenFile(LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle)
extrn OpenFile:dword
; HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
extrn GlobalFree:dword
; HGLOBAL __stdcall GlobalAlloc(UINT uFlags, SIZE_T dwBytes)
extrn GlobalAlloc:dword
extrn lstrlen:dword
; BOOL __stdcall CloseHandle(HANDLE hObject)
extrn CloseHandle:dword
; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
extrn WriteFile:dword
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
extrn __imp_GetModuleHandleA:dword
; BOOL __stdcall ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
extrn ReadFile:dword
; void __stdcall __noreturn ExitProcess(UINT uExitCode)
extrn __imp_ExitProcess:dword

;
; Imports from COMCTL32.DLL
;
; void __stdcall InitCommonControls()
extrn InitCommonControls:dword
; HWND __stdcall CreateToolbarEx(HWND hwnd, DWORD ws, UINT wID, int nBitmaps, HINSTANCE hBMInst, UINT_PTR wBMID, LPCTBBUTTON lpButtons, int iNumButtons, int dxButton, int dyButton, int dxBitmap, int dyBitmap, UINT uStructSize)
extrn CreateToolbarEx:dword
extrn CreateToolbar:dword

;
; Imports from GDI32.dll
;
; BOOL __stdcall TextOutA(HDC hdc, int x, int y, LPCSTR lpString, int c)
extrn TextOutA:dword
; int __stdcall StartPage(HDC hdc)
extrn StartPage:dword
; int __stdcall StartDocA(HDC hdc, const DOCINFOA *lpdi)
extrn StartDocA:dword
; BOOL __stdcall GetTextMetricsA(HDC hdc, LPTEXTMETRICA lptm)
extrn GetTextMetricsA:dword
; HGDIOBJ __stdcall GetStockObject(int i)
extrn GetStockObject:dword
; int __stdcall EndPage(HDC hdc)
extrn EndPage:dword
; int __stdcall EndDoc(HDC hdc)
extrn EndDoc:dword
; BOOL __stdcall DeleteObject(HGDIOBJ ho)
extrn DeleteObject:dword
; BOOL __stdcall DeleteDC(HDC hdc)
extrn DeleteDC:dword

;
; Imports from COMDLG32.dll
;
; BOOL __stdcall GetSaveFileNameA(LPOPENFILENAMEA)
extrn GetSaveFileNameA:dword
; BOOL __stdcall GetOpenFileNameA(LPOPENFILENAMEA)
extrn GetOpenFileNameA:dword
; BOOL __stdcall PrintDlgA(LPPRINTDLGA pPD)
extrn PrintDlgA:dword



end start
